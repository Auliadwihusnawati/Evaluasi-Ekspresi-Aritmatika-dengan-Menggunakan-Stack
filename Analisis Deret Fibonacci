#include <iostream>
#include <chrono>
using namespace std;
using namespace std::chrono;

int fibonacciRecursive(int n) {
    if (n <= 1)
        return n;
    return fibonacciRecursive(n - 1) + fibonacciRecursive(n - 2);
}

int fibonacciDP(int n) {
    int fib[n + 2];
    fib[0] = 0;
    fib[1] = 1;
    for (int i = 2; i <= n; i++)
        fib[i] = fib[i - 1] + fib[i - 2];
    return fib[n];
}

int main() {
    int n_values[] = {10, 25, 30, 40, 50};
    
    cout << "==================================" << endl;
    cout << "Waktu Eksekusi Fibonacci (ms):" << endl;
    cout << "==================================" << endl;
    for (int n : n_values) {
        auto start = high_resolution_clock::now();
        fibonacciRecursive(n);
        auto stop = high_resolution_clock::now();
        auto duration_recursive = duration_cast<milliseconds>(stop - start).count();

        start = high_resolution_clock::now();
        fibonacciDP(n);
        stop = high_resolution_clock::now();
        auto duration_dp = duration_cast<milliseconds>(stop - start).count();

        cout << "n = " << n << ":\n";
        cout << "Rekursif: " << duration_recursive << " ms\n";
        cout << "Dynamic Programming: " << duration_dp << " ms\n";
        cout << "----------------------------------" << endl;
    }

    cout << "==================================" << endl;
    cout << "Analisis Hasil:" << endl;
    cout << "==================================" << endl;
    cout << "Dari hasil pengukuran waktu eksekusi, terlihat bahwa pendekatan Dynamic Programming lebih efisien daripada pendekatan rekursif untuk nilai n yang besar seperti 40 dan 50. Hal ini terjadi karena pendekatan rekursif memiliki kompleksitas waktu eksponensial O(2^n), sementara pendekatan Dynamic Programming memiliki kompleksitas waktu linier O(n). Sehingga, untuk nilai n yang besar, pendekatan Dynamic Programming dapat menghasilkan hasil dengan lebih cepat.\n";
    
    return 0;
}
