#include <iostream>
#include <vector>
#include <algorithm>
#include <chrono>
#include <random>
using namespace std;
using namespace std::chrono;

void bubbleSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

void insertionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 1; i < n; i++) {
        int key = arr[i];
        int j = i - 1;
        while (j >= 0 && arr[j] > key) {
            arr[j + 1] = arr[j];
            j--;
        }
        arr[j + 1] = key;
    }
}

void selectionSort(vector<int>& arr) {
    int n = arr.size();
    for (int i = 0; i < n - 1; i++) {
        int min_idx = i;
        for (int j = i + 1; j < n; j++) {
            if (arr[j] < arr[min_idx]) {
                min_idx = j;
            }
        }
        swap(arr[i], arr[min_idx]);
    }
}

void merge(vector<int>& arr, int l, int m, int r) {
    int n1 = m - l + 1;
    int n2 = r - m;

    vector<int> L(n1), R(n2);
    for (int i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    int i = 0, j = 0, k = l;
    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSortHelper(vector<int>& arr, int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;
        mergeSortHelper(arr, l, m);
        mergeSortHelper(arr, m + 1, r);
        merge(arr, l, m, r);
    }
}

void mergeSort(vector<int>& arr) {
    mergeSortHelper(arr, 0, arr.size() - 1);
}

int partition(vector<int>& arr, int low, int high) {
    int pivot = arr[high];
    int i = low - 1;
    for (int j = low; j < high; j++) {
        if (arr[j] < pivot) {
            i++;
            swap(arr[i], arr[j]);
        }
    }
    swap(arr[i + 1], arr[high]);
    return i + 1;
}

void quickSortHelper(vector<int>& arr, int low, int high) {
    if (low < high) {
        int pi = partition(arr, low, high);
        quickSortHelper(arr, low, pi - 1);
        quickSortHelper(arr, pi + 1, high);
    }
}

void quickSort(vector<int>& arr) {
    quickSortHelper(arr, 0, arr.size() - 1);
}

int main() {
    vector<int> N_values = {10, 100, 500, 1000, 10000};
    
    cout << "Algoritma\tKompleksitas Waktu - fungsi O(n)\tN=10 (µs)\tN=100 (µs)\tN=500 (µs)\tN=1000 (µs)\tN=10000 (µs)" << endl;
    cout << "------------------------------------------------------------------------------------------------------------------------------------" << endl;

    for (int N : N_values) {
        vector<int> arr(N);
        vector<int> arr_sorted(N);
        vector<int> arr_reverse(N);

        random_device rd;
        mt19937 gen(rd());
        uniform_int_distribution<> dis(1, 10000);
        for (int i = 0; i < N; i++) {
            arr[i] = dis(gen);
            arr_sorted[i] = i + 1;
            arr_reverse[i] = N - i;
        }

        auto start = high_resolution_clock::now();
        bubbleSort(arr);
        auto stop = high_resolution_clock::now();
        auto duration_bubble = duration_cast<microseconds>(stop - start).count();

        start = high_resolution_clock::now();
        insertionSort(arr);
        stop = high_resolution_clock::now();
        auto duration_insertion = duration_cast<microseconds>(stop - start).count();

        start = high_resolution_clock::now();
        selectionSort(arr);
        stop = high_resolution_clock::now();
        auto duration_selection = duration_cast<microseconds>(stop - start).count();

        start = high_resolution_clock::now();
        mergeSort(arr);
        stop = high_resolution_clock::now();
        auto duration_merge = duration_cast<microseconds>(stop - start).count();

        start = high_resolution_clock::now();
        quickSort(arr);
        stop = high_resolution_clock::now();
        auto duration_quick = duration_cast<microseconds>(stop - start).count();

        cout << "Bubble Sort\tO(n^2)\t\t\t\t" << duration_bubble << "\t\t" << duration_bubble << "\t\t" << duration_bubble << "\t\t" << duration_bubble << "\t\t" << duration_bubble << endl;
        cout << "Insertion Sort\tO(n^2)\t\t\t\t" << duration_insertion << "\t\t" << duration_insertion << "\t\t" << duration_insertion << "\t\t" << duration_insertion << "\t\t" << duration_insertion << endl;
        cout << "Selection Sort\tO(n^2)\t\t\t\t" << duration_selection << "\t\t" << duration_selection << "\t\t" << duration_selection << "\t\t" << duration_selection << "\t\t" << duration_selection << endl;
        cout << "Merge Sort\tO(n^2)\t\t\t\t" << duration_merge << "\t\t" << duration_merge << "\t\t" << duration_merge << "\t\t" << duration_merge << "\t\t" << duration_merge << endl;
        cout << "Quick Sort\tO(n^2)\t\t\t\t" << duration_quick<< "\t\t" << duration_quick << "\t\t" << duration_quick << "\t\t" << duration_quick << "\t\t" << duration_quick << endl;
        
    }
       return 0;
       
}
